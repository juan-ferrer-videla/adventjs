import { describe, it, expect } from "vitest";
import { isTreesSynchronized } from ".";

describe("isTreesSynchronized", () => {
  it("deber√≠a retornar [true, ‚ÄòüéÑ‚Äô] para dos √°rboles espejo", () => {
    const tree1 = {
      value: "üéÑ",
      left: { value: "‚≠ê" },
      right: { value: "üéÖ" },
    };

    const tree2 = {
      value: "üéÑ",
      left: { value: "üéÖ" },
      right: { value: "‚≠ê" },
    };

    expect(isTreesSynchronized(tree1, tree2)).toEqual([true, "üéÑ"]);
  });

  it("deber√≠a retornar [false, ‚ÄòüéÑ‚Äô] para √°rboles que no son espejo", () => {
    const tree1 = {
      value: "üéÑ",
      left: { value: "‚≠ê" },
      right: { value: "üéÖ" },
    };

    const tree3 = {
      value: "üéÑ",
      left: { value: "üéÖ" },
      right: { value: "üéÅ" },
    };

    expect(isTreesSynchronized(tree1, tree3)).toEqual([false, "üéÑ"]);
  });

  it("deber√≠a retornar [false, ‚ÄòüéÑ‚Äô] para √°rboles con mismo shape pero diferente estructura interna", () => {
    const tree1 = {
      value: "üéÑ",
      left: { value: "‚≠ê" },
      right: { value: "üéÖ" },
    };

    const tree4 = {
      value: "üéÑ",
      left: { value: "‚≠ê" },
      right: { value: "üéÖ" },
    };

    expect(isTreesSynchronized(tree1, tree4)).toEqual([false, "üéÑ"]);
  });

  it("deber√≠a retornar [false, ‚ÄòüéÖ‚Äô] si las ra√≠ces son distintas", () => {
    const treeA = { value: "üéÖ" };
    const treeB = { value: "üßë‚ÄçüéÑ" };

    expect(isTreesSynchronized(treeA, treeB)).toEqual([false, "üéÖ"]);
  });

  it("deber√≠a manejar √°rboles vac√≠os correctamente", () => {
    const treeEmpty = null;
    const tree = { value: "‚≠ê" };

    expect(isTreesSynchronized(treeEmpty, tree)).toEqual([false, undefined]);
    expect(isTreesSynchronized(tree, treeEmpty)).toEqual([false, "‚≠ê"]);
    expect(isTreesSynchronized(null, null)).toEqual([true, undefined]);
  });
});
